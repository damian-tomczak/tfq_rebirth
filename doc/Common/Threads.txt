################################################################################
  Kodowanie Windows-1250, koniec wiersza CR+LF, test: Za¿ó³æ gêœl¹ jaŸñ
  Threads - Biblioteka do wielow¹tkowoœci i synchronizacji
  Copyleft (C) 2007 Adam Sawicki
  Licencja: GNU LGPL
  Kontakt: mailto:sawickiap@poczta.onet.pl , http://regedit.gamedev.pl/
################################################################################


Ogólne
================================================================================

- Obiektowy

- Przenoœny
> W Windows u¿ywa WinAPI
> W Linux u¿ywa pthreads i jego rozszerzeñ

- W razie b³êdów rzuca wyj¹tki modu³u Error
Ale wiele funkcji dzia³aj¹cych na ju¿ utworzonych obiektach (Lock, Wait itp.)
dla optymalizacji wydajnoœci nie sprawdza b³êdów.

- Wzorowany na:
> Na ksi¹¿ce "Modern Multithreading" (Carver, Tai, wyd. Wiley)
> Klasa Thread - na jêzyku Java
> Implementacja Cond w Windows - na bibliotece wxWidgets
  http://www.wxwidgets.org/
> Implementacja Barrier w Windows - na wyk³adach dr in¿. Tomasza Olasa
  http://icis.pcz.pl/~olas/

- Korzysta z wzorca Pimpl. Dziêki temu nie wystawia do nag³ówka ¿adnych
zale¿noœci #include.

- Wydajnoœæ: Nie jest maksymalna (g³ównie przez ten Pimpl), ale nie powinna byæ
z³a.


Sk³adniki
================================================================================

- Thread - klasa w¹tku

Obiekty synchronizuj¹ce:

- Mutex - muteks
  - Klasa pomocnicza MutexLock i makro MUTEX_LOCK
- Semaphore - semafor zliczaj¹cy
- Cond - zmienna warunkowa
- Barrier - bariera
- Event - zdarzenie (auto-reset lub manual-reset)

Szczegó³y znaczenia i u¿ycia ka¿dego z nich powinny wyjaœniæ komentarze w
Threads.hpp.


Implementacja
================================================================================

           |   Windows                            Linux
-----------+--------------------------------------------------------------------
Mutex      |   CRITICAL_SECTION lub Mutex         pthread_mutex_t
Semaphore  |   Semaphore                          sem_t
Cond       |   (emulowany)                        pthread_cond_t
Barrier    |   (emulowany)                        pthread_barrier_t
Event      |   Event                              (emulowany)


Czego nie ma
================================================================================

- Thread: w¹tków Detached - wszystkie s¹ Joinable.
Dlaczego? Poniewa¿ nie chcia³o mi siê tego pisaæ. Poza tym nie jest a¿ tak
potrzebne.

- Thread: mechanizmu cancelacji
Dlaczego? Bo szczegó³y s¹ zale¿ne od danego problemu, zwykle to jest
niepotrzebne i nie ma sensu zabieraæ czasu i pamiêci na dodatkowe zasoby dla
ka¿dego w¹tku. Kto chce mieæ cancelacjê, mo¿e sobie ³atwo wstawiæ do klasy
swojego w¹tku Event.

- Semafora binarnego
Dlaczego? Bo nie ma go natywnie ani w WinAPI ani w pthreads. Poza tym nie jest
a¿ tak potrzebny, no i nie chce mi siê myœleæ jak go zrobiæ.

- RW Lock
Dlaczego? Bo to ju¿ bardziej zaawansowana sprawa, a ponadto zale¿na od
konkregnego zastosowania. Nie zag³êbia³em siê w to jeszcze dok³adnie.

- Event: PulseEvent
Dlaczego? Bo nie jest to a¿ takie potrzebne - jest dziwne, a poza tym nie bardzo
wiem jak to zasymulowaæ w Event w Linuksie.

- Czekania z okreœlon¹ zamiast niezdefiniowanej kolejnoœci¹ wznawiania w¹tków.

- Zmienne warunkowe: Innych Signaling Disciplines ni¿ Signal-and-Continue: np.
Signal-and-Urgent-Wait, Signal-and-Exit, Urgent-Signal-and-Continue (wg ksi¹¿ki
"Modern Multithreading", Carver, Tai, wyd. Wiley, str. 199).

