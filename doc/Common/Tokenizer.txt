################################################################################
  Kodowanie Windows-1250, koniec wiersza CR+LF, test: Za¿ó³æ gêœl¹ jaŸñ
  Tokenizer - Parser sk³adni jêzyka podobnego do C/C++
  Copyleft (C) 2007 Adam Sawicki
  Licencja: GNU LGPL
  Kontakt: mailto:sawickiap@poczta.onet.pl , http://regedit.gamedev.pl/
################################################################################


Wstêp
================================================================================

To prosty tokenizer, który przetwarza ci¹g znaków na tokeny takie jak liczby,
identifikatory, ³añcuchy, symbole itp. Obs³ugiwana sk³adnia jest wzorowana na
C/C++. Jego za³o¿eniem jest zast¹piæ mój stary jêzyk opisu XNL2.

Na jego bazie mo¿na budowaæ parsery ró¿nych plików np. konfiguracyjnych albo
opisuj¹cych i przechowuj¹cych ró¿ne informacje - tekstowe, numeryczne i inne,
dowolnie zorganizowane. Polecam go zamiast XML, bo XML jest bardzo rozwlek³y.
Tokenizer raczej nie nadaje siê do budowy jêzyków programowania, a jedynie
formatów opisu.


Ogólne
================================================================================

- Tokenizer w przypadku b³êdów rzuca wyj¹tki klasy err::TokenizerError, która
oprócz tego co ka¿dy b³¹d modu³u Error niesie te¿ (zarówno w treœci komunikatu,
jak i w osobnych polach) informacje na temat miejsca wyst¹pienia b³êdu w
dokumencie (nr wiersza, kolumny i znaku). Jest to zawsze miejsce, od którego
rozpoczyna siê token, który sprawi³ problem.

- Wiersze, kolumny i znaki s¹ numerowane od 1, tak jak w edytorach tekstu.


Obs³uga
================================================================================

1. Wczytaæ dokument lub uzyskaæ strumieñ pozwalaj¹cy na jego wczytywanie.
2. Utworzyæ obiekt klasy Tokenizer korzystaj¹c z jednego z jego konstruktorów.
3. Opcjonalnie skonfigurowaæ tokenizer rejestruj¹c swoje s³owa kluczowe.
4. Pobieraæ w pêtli kolejne tokeny metod¹ Next, po której mo¿na odczytywaæ:
   - Typ tokena - metoda GetToken
   - Informacje na temat tokena - metoda GetString i inne zale¿nie od typu
   Przerwaæ pêtlê po napotkaniu TOKEN_EOF.


Sk³adnia
================================================================================

Sk³adnia jest wzorowana na C/C++.

Znak \ po którym od razu nastêpuje koniec linii prze³amuje liniê tak, ¿e koniec
linii jest ignorowany i dalej rozci¹ga siê ta sama linia, np.:

  abc\
  def

Komentarze mog¹ byæ:

- jednowierszowe: // komentarz
  Roci¹ga siê do koñca wiersza
- wielowierszowe: /* komentarz */
  Rozci¹ga siê do napotkania pierwszego */
  Nie mo¿na zagnie¿d¿aæ komentarzy.

Symbolami s¹ znaki:

  ` ~ ! @ # $ % ^ & * ( ) = [ ] { } ; : , . < > ? \ | /

Identyfikatorem jest ci¹g liter (tylko ASCII, bez polskich) i cyfr
rozpoczynaj¹cy siê od litery. Znak _ jest uwa¿any za literê. Przyk³ady:

  abc   a123   _G

S³owo kluczowe jest jak identyfikator. Jedyna ró¿nica polega na tym, ¿e jego
specjalne znaczenie jako s³owa kluczowego zosta³o zarejestrowane.

Liczba ca³kowita to na przyk³ad:
Jeœli rozpoczyna siê od 0, jest ósemkowa.
Jeœli rozpoczyna siê od 0x lub 0X, jest szesnastkowa.

  10   +2   -7   0777   0xFFFFFFFF

Liczba zmiennoprzecinkowa to na przyk³ad:

  10.5   -.2   3.1e-2

Sta³a znakowa to pojedynczy znak objêty w apostrofy:

  'A'   '\n'

Sta³a ³añcuchowa to dowolna liczba znaków objêta w cudzys³owy.
O tym czy wewn¹trz ³añcucha mo¿e siê znajdowaæ koniec wiersza (czy ³añcuch mo¿e
siê rozci¹gaæ na wiele wierszy) decyduje flaga w konstruktorze tokena. Domyœlnie
nie mo¿e.

  "abc"   ""   "a b \"c\"\n"

Sekwencje ucieczki, czyli sposób zapisywania znaków specjalnych wewn¹trz sta³ych
znakowych i ³añcuchowych jest podobny do C/C++.

- Znaki interpretowane dos³ownie: \\ \? \" \'
- Znaki specjalne: \0 \r \n \t \v \b \f \a
- Dowolny znak zapisany jako dwucyfrowa liczba szesnastkowa: \xFF \x41 \xA0


Czego nie ma
================================================================================

- W³¹czania i wy³¹czania poszczególnych znaków jako symboli.
By³o, ale ostatecznie zdecydowa³em siê zrezygnowaæ z tej funkcji.

- Symboli wieloznakowych, np.: ==
By³o w planach, ale ostatecznie zrezygnowa³em bo uzna³em, ¿e siê nie przyda.

- Przyrostków do liczb sygnalizuj¹cych ich typ, np.: 1.0f
Uzna³em, ¿e obejdzie siê bez tego.

- Wracania do wczeœniejszych miejsc w dokumencie, podgl¹dania nastêpnych
tokenów, odk³adania tokenów z powrotem

- Parsera DOM, który rozk³ada³by dokument na listê tokenów
Lepiej od razu parsowaæ strumieñ tokenów na docelowe dane.

